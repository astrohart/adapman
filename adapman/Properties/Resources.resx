<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UsageMessage" xml:space="preserve">
    <value>xyLOGIX Adapter Manager v1.0
Command-line utility that manages the disabled/enabled and connected/disconnected state of 
your computer's network and Wi-Fi adapter(s).

Copyright (c) 2018 xyLOGIX, LLC.  All rights reserved.

Usage:
   adapman [-da] [-ea] [-cw:ssid "ssid"] [-cw:pwd "password"] [-dw "SSID"]

OPTIONS:
    NOTE: Only one switch may be applied at any time, unless the 'cw' switches are used, in which case,
    both are required.
	
    -da                Disables ALL of the network adapters installed on the system.  Will not work 
                       on adapters that are not currently connected to a network.
					   
    -ea                Enables ALL of the network adapters installed on the system.  Will not work on
                       adapters that are already enabled.
					   
    -cw:ssid           Connects to the Wi-Fi network with the given SSID (The Wi-Fi adapter must be
                       enabled first with -ea).  The SSID must always be in double-quotes.
					   
    -cw:pwd            "" if the Wi-Fi network with the specified SSID is open; otherwise, the network security
                       key for the Wi-Fi network with specified SSID.  If not given, empty double quotes
                       must be specified. If a password is given, the password must be in double quotes. If the
                       -cw:ssid switch is specified, this switch is mandatory.  A Wi-Fi network requiring a password
                       may not connect if the password is not specified; however, sometimes it will still connect if
                       Windows has been set to remember the password.
					   
    -dw                Disconnects from the Wi-Fi network with the specified SSID, but leaves the adapter
                       enabled.  Will not work on adapters that are already not connected to a network.</value>
  </data>
  <data name="ValueParamReq" xml:space="preserve">
    <value>The 'value' parameter must be non-blank.</value>
  </data>
  <data name="DiisconnectSSIDReq" xml:space="preserve">
    <value>Must specify the SSID of the wifi network you want to disconnect from.</value>
  </data>
  <data name="ConnectSSIDReq" xml:space="preserve">
    <value>Must specify the SSID of the wifi network you want to connect to.</value>
  </data>
  <data name="OperationEffectiveOnlyOnCurrentlyConnectedAdapters" xml:space="preserve">
    <value>This operation is only effective on adapters that currently are connected to a network.</value>
  </data>
  <data name="WifiAdapterAlreadyDisconnected" xml:space="preserve">
    <value>The Wi-Fi adapter is already in the disconnected state.</value>
  </data>
  <data name="UnandledExceptionError" xml:space="preserve">
    <value>Unable to process the requested operation. {0}.  Try to call this program again.</value>
  </data>
</root>